import java.util.stream.Collectors

import static java.util.stream.Collectors.joining

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

apply plugin: 'elasticsearch.build'

configurations {
  entitlementTrampoline
}

dependencies {
  entitlementTrampoline project(":distribution:tools:entitlement-trampoline")
  compileOnly project(":libs:elasticsearch-core")
  compileOnly project(":distribution:tools:entitlement-runtime")
  compileOnly project(":distribution:tools:entitlement-trampoline")
  implementation 'org.ow2.asm:asm:9.7'
  testImplementation project(":test:framework")
}

tasks.named('test').configure {
  systemProperty "tests.security.manager", "false"
  dependsOn('jar')
  jvmArgs "-javaagent:${ tasks.named('jar').flatMap{ it.archiveFile }.get()}"

  def trampolineFiles = configurations.entitlementTrampoline.files
  def trampolineJars = trampolineFiles.stream().map(File::toString).collect(joining(File.pathSeparator))
  jvmArgs "-Dentitlements.trampolineJars=$trampolineJars"


  // The Elasticsearch build plugin automatically adds all compileOnly deps as testImplementation.
  // We must not add the trampoline this way because it is also on the boot classpath, and that would lead to jar hell.
  classpath -= files(trampolineFiles)
}

tasks.named('jar').configure {
  manifest {
    attributes(
      'Premain-Class': 'org.elasticsearch.entitlement.agent.EntitlementAgent'
      , 'Can-Retransform-Classes': 'true'
    )
  }
}

tasks.named('forbiddenApisMain').configure {
  replaceSignatureFiles 'jdk-signatures'
}

