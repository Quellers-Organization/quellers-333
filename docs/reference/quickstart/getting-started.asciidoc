[[getting-started]]
== Quick start: Indices, documents, and mappings
++++
<titleabbrev>Basics: Indices, documents, and mappings</titleabbrev>
++++

In this quick start guide, you'll learn how to do the following tasks:

* Create an index
* Add documents
* Inspect a document's structure
* Use dynamic and explicit mappings of data types
* Do basic searches

////
[source,console]
----
PUT books
----
// TESTSETUP

[source,console]
--------------------------------------------------
DELETE books
--------------------------------------------------
// TEARDOWN

////

[discrete]
[[getting-started-index-creation]]
=== Create an index

Create a new index named `books`:

[source,console]
----
PUT /books
----
// TEST

List all indices to confirm creation:

[source,console]
----
GET /_cat/indices
----
// TEST[continued]

[discrete]
[[getting-started-add-documents]]
=== Add documents

You add data to {es} as JSON objects called documents.
{es} stores these
documents in searchable indices.

[discrete]
[[getting-started-add-single-document]]
==== Add a single document

Submit the following indexing request to add a single document to the
`books` index.

[TIP]
====
If the index didn't already exist, the request would automatically create it.
====

[source,console]
----
POST books/_doc
{"name": "Snow Crash", "author": "Neal Stephenson", "release_date": "1992-06-01", "page_count": 470}
----
// TEST[s/_doc/_doc?refresh=wait_for/]

The response includes metadata that {es} generates for the document including a unique `_id` for the document within the index.

.Expand to see example response
[%collapsible]
===============
[source,console-result]
----
{
  "_index": "books",
  "_id": "O0lG2IsBaSa7VYx_rEia",
  "_version": 1,
  "result": "created",
  "_shards": {
    "total": 2,
    "successful": 2,
    "failed": 0
  },
  "_seq_no": 0,
  "_primary_term": 1
}
----
// TEST[skip:TODO]
===============

[discrete]
[[getting-started-add-multiple-documents]]
==== Add multiple documents

Use the <<docs-bulk,`_bulk` endpoint>> to add multiple documents in one request. Bulk data
must be newline-delimited JSON (NDJSON).

[source,console]
----
POST /_bulk
{ "index" : { "_index" : "books" } }
{"name": "Revelation Space", "author": "Alastair Reynolds", "release_date": "2000-03-15", "page_count": 585}
{ "index" : { "_index" : "books" } }
{"name": "1984", "author": "George Orwell", "release_date": "1985-06-01", "page_count": 328}
{ "index" : { "_index" : "books" } }
{"name": "Fahrenheit 451", "author": "Ray Bradbury", "release_date": "1953-10-15", "page_count": 227}
{ "index" : { "_index" : "books" } }
{"name": "Brave New World", "author": "Aldous Huxley", "release_date": "1932-06-01", "page_count": 268}
{ "index" : { "_index" : "books" } }
{"name": "The Handmaids Tale", "author": "Margaret Atwood", "release_date": "1985-06-01", "page_count": 311}
----
// TEST[continued]

You should receive a response indicating there were no errors.

.Expand to see example response
[%collapsible]
===============
[source,console-result]
----
{
  "errors": false,
  "took": 29,
  "items": [
    {
      "index": {
        "_index": "books",
        "_id": "QklI2IsBaSa7VYx_Qkh-",
        "_version": 1,
        "result": "created",
        "_shards": {
          "total": 2,
          "successful": 2,
          "failed": 0
        },
        "_seq_no": 1,
        "_primary_term": 1,
        "status": 201
      }
    },
    {
      "index": {
        "_index": "books",
        "_id": "Q0lI2IsBaSa7VYx_Qkh-",
        "_version": 1,
        "result": "created",
        "_shards": {
          "total": 2,
          "successful": 2,
          "failed": 0
        },
        "_seq_no": 2,
        "_primary_term": 1,
        "status": 201
      }
    },
    {
      "index": {
        "_index": "books",
        "_id": "RElI2IsBaSa7VYx_Qkh-",
        "_version": 1,
        "result": "created",
        "_shards": {
          "total": 2,
          "successful": 2,
          "failed": 0
        },
        "_seq_no": 3,
        "_primary_term": 1,
        "status": 201
      }
    },
    {
      "index": {
        "_index": "books",
        "_id": "RUlI2IsBaSa7VYx_Qkh-",
        "_version": 1,
        "result": "created",
        "_shards": {
          "total": 2,
          "successful": 2,
          "failed": 0
        },
        "_seq_no": 4,
        "_primary_term": 1,
        "status": 201
      }
    },
    {
      "index": {
        "_index": "books",
        "_id": "RklI2IsBaSa7VYx_Qkh-",
        "_version": 1,
        "result": "created",
        "_shards": {
          "total": 2,
          "successful": 2,
          "failed": 0
        },
        "_seq_no": 5,
        "_primary_term": 1,
        "status": 201
      }
    }
  ]
}
----
// TEST[skip:TODO]
===============

[discrete]
[[getting-started-mappings-and-data-types]]
=== Mappings and data types

[discrete]
[[getting-started-dynamic-mapping]]
==== Dynamic mapping

When using dynamic mapping, {es} automatically creates mappings for new fields by default.
The documents we've added so far have used dynamic mapping, because we didn't specify a mapping when creating the index.

Let's add a new document to the `books` index with a field that doesn't exist, to see how dynamic mapping works.

[source,console]
----
PUT /books/_doc
{"name": "The Great Gatsby", "author": "F. Scott Fitzgerald", "release_date": "1925-04-10", "page_count": 180, "new_field": "This is a dynamically added field"}
----
// TEST[continued]

View the mapping for the `books` index. The new field `new_field` has been added to the mapping with a `keyword` data type.

[source,console]
----
GET /books/_mapping
----
// TEST[continued]

[discrete]
[[getting-started-explicit-mapping]]
==== Explicit mapping

Create an index named `my-explicit-mappings-books` with explicit mappings:

[source,console]
----
PUT /my-explicit-mappings-books
{
  "mappings": {
    "dynamic": false,  <1>
    "properties": {
      "name": { "type": "text" },
      "author": { "type": "text" },
      "release_date": { "type": "date", "format": "yyyy-MM-dd" },
      "page_count": { "type": "integer" }
    }
  }
}
----
// TEST[continued]
<1> Disables dynamic mapping for the index. Documents containing fields not defined in the mapping will be rejected.

[discrete]
[[getting-started-combined-mapping]]
=== Combine dynamic and explicit mappings

As long as an index has the `dynamic` flag set to `true`, you can add new fields to documents without updating the mapping.
This allows you to combine dynamic and explicit mappings.

[discrete]
[[getting-started-search-data]]
=== Search data

Indexed documents are available for search in near real-time.
// TODO: You'll find more detailed quick start guides in TODO

[discrete]
[[getting-started-search-all-documents]]
==== Search all documents

Run the following command to search the `books` index for all documents:

[source,console]
----
GET books/_search
----
// TEST[continued]

The `_source` metadata field of each hit contains the original
JSON object submitted during indexing.

[discrete]
[[getting-started-match-query]]
==== `match` query

You can use the <<query-dsl-match-query,`match` query>> to search for documents that contain a specific value in a specific field.
This is the standard query for full-text searches.

Run the following command to search the `books` index for documents containing `brave` in the `name` field:

[source,console]
----
GET books/_search
{
  "query": {
    "match": {
      "name": "brave"
    }
  }
}
----
// TEST[continued]