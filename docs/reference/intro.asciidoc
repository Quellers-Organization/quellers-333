[[elasticsearch-intro]]
== {es} 101

A 101 course contains the elementary or basic facts about a subject for newcomers.
{es} 101 covers all the basic information you need to know to get started with {es}.

In this guide, you will learn:

* What {es} is, its key features, and how to deploy it.
* {es}'s most important primitives and how data is stored in {es}.
* How to ingest data into {es}.
* How to search and analyze data in {es}.
* How to plan for scalability and resilience in production.

[[elasticsearch-intro-what-is-es]]
=== What is {es}?

{es-repo}[{es}] is a distributed search and analytics engine, scalable data store, and vector database built on Apache Lucene.
It's optimized for speed and relevance on production-scale workloads.
Use {es} to search, index, store, and analyze data of all shapes and sizes in near real time.

[TIP]
====
{es} has a lot of features. Explore the full list on the https://www.elastic.co/elasticsearch/features[product webpage^].
====

{es} is the heart of the {estc-welcome-current}/stack-components.html[Elastic Stack] and powers the Elastic https://www.elastic.co/enterprise-search[Search], https://www.elastic.co/observability[Observability] and https://www.elastic.co/security[Security] solutions.

{es} is used for a wide and growing range of use cases. Here are a few examples:

* *Monitor log and event data*. Store logs, metrics, and event data for observability and security information and event management (SIEM).
* *Build search applications*. Add search capabilities to apps or websites, or build enterprise search engines over your organization's internal data sources.
* *Vector database*. Store and search vectorized data, and create vector embeddings with built-in and third-party natural language processing (NLP) models.
* *Retrieval augmented generation (RAG)*. Use {es} as a retrieval engine to augment Generative AI models.
* *Application and security monitoring*. Monitor and analyze application performance and security data effectively.

This is just a sample of search, observability, and security use cases enabled by {es}. 
Refer to our https://www.elastic.co/customers/success-stories[customer success stories] for concrete examples across a range of industries.

[discrete]
[[elasticsearch-intro-elastic-stack]]
.What is the Elastic Stack?
*******************************
{es} is the core component of the Elastic Stack, a suite of products for collecting, storing, searching, and visualizing data.
https://www.elastic.co/guide/en/starting-with-the-elasticsearch-platform-and-its-solutions/current/stack-components.html[Learn more about the Elastic Stack].
*******************************

[[elasticsearch-intro-deploy]]
=== Deployment options

To use {es}, you need a running instance of the {es} service.
You can deploy {es} in various ways.

**Quick start options**

* <<run-elasticsearch-locally,*Local dev*>>. Get started quickly with a minimal local Docker setup. 
* {cloud}/ec-getting-started-trial.html[*Elastic Cloud*]. {es} is available as part of our hosted Elastic Stack offering, deployed in the cloud with your provider of choice. Sign up for a https://cloud.elastic.co/registration[14 day free trial].
* {serverless-docs}/general/sign-up-trial[*Elastic Cloud Serverless* (technical preview)]. Create serverless projects for autoscaled and fully managed {es} deployments. Sign up for a https://cloud.elastic.co/serverless-registration[14 day free trial].

**Advanced deployment options**

* <<elasticsearch-deployment-options,*Self-managed*>>. Install, configure, and run {es} on your own premises.
* {ece-ref}/Elastic-Cloud-Enterprise-overview.html[*Elastic Cloud Enterprise*]. Deploy Elastic Cloud on public or private clouds, virtual machines, or your own premises.
* {eck-ref}/k8s-overview.html[*Elastic Cloud on Kubernetes*]. Deploy Elastic Cloud on Kubernetes.

[discrete]
[[elasticsearch-intro-cluster-nodes-shards]]
=== Clusters, nodes, and shards

A single instance of Elasticsearch is a node.
A collection of connected nodes is called a cluster.
In production environments, nodes typically run on individual servers or virtual machines.
Adding nodes to a cluster increases capacity and redundancy.

{es} automatically distributes data and query load across all available nodes using shards and replicas.
Shards are the internal building blocks of an index, and each shard is a single Lucene index.

.What you need to know
*******************************
Nodes, clusters and shards are what make Elasticsearch distributed and scalable.
// TODO: Learn more in production guide
These concepts aren't essential if you're just getting started.
How you <<elasticsearch-intro-deploy,deploy Elasticsearch>> in production determines what you need to know:

* *Self-managed Elasticsearch*. You are responsible for setting up and managing nodes, clusters, shards, and replicas.
This includes managing the underlying infrastructure, scaling, and ensuring high availability through failover and backup strategies.
* *Elastic Cloud*. Elastic can autoscale resources in response to workload changes.
Choose from different deployment types to apply sensible defaults for your use case.
A basic understanding of nodes, shards, and replicas is still important.
* *Elastic Cloud Serverless*. You don't need to know about nodes, shards, replicas.
These resources are 100% automated on the serverless platform, which is designed to scale with your workload.
*******************************

// [discrete]
// [[elasticsearch-next-steps]]
// === Learn more

// Some resources to help you get started:

// * <<getting-started, Quickstart>>. A beginner's guide to deploying your first {es} instance, indexing data, and running queries.
// * https://elastic.co/webinars/getting-started-elasticsearch[Webinar: Introduction to {es}]. Register for our live webinars to learn directly from {es} experts.
// * https://www.elastic.co/search-labs[Elastic Search Labs]. Tutorials and blogs that explore AI-powered search using the latest {es} features.
// ** Follow our tutorial https://www.elastic.co/search-labs/tutorials/search-tutorial/welcome[to build a hybrid search solution in Python].
// ** Check out the https://github.com/elastic/elasticsearch-labs?tab=readme-ov-file#elasticsearch-examples--apps[`elasticsearch-labs` repository] for a range of Python notebooks and apps for various use cases.

// new html page 
[[documents-indices]]
=== Indices, documents, and fields
++++
<titleabbrev>Indices and documents</titleabbrev>
++++

The index is the fundamental unit of storage in {es}, a logical namespace for storing data that share similar characteristics.
After you have {es} <<elasticsearch-intro-deploy,deployed>>, you'll get started by creating an index to store your data.

[TIP]
====
A closely related concept is a <<data-streams,data stream>>.
This index abstraction is optimized for append-only time-series data, and is made up of hidden, auto-generated backing indices.
If you're working with time-series data, we recommend the {observability-guide}[Elastic Observability] solution.
====

Some key facts about indices:

* An index is a collection of documents
* An index has a unique name
* An index can also be referred to by an alias
* An index has a mapping that defines the schema of its documents

[discrete]
[[elasticsearch-intro-documents-fields]]
==== Documents and fields

{es} serializes and stores data in the form of JSON documents.
A document is a set of fields, which are key-value pairs that contain your data.
Each document has a unique ID, which you can create or have {es} auto-generate.

A simple {es} document might look like this:

[source,js]
----
{
  "_index": "my-first-elasticsearch-index",
  "_id": "DyFpo5EBxE8fzbb95DOa",
  "_version": 1,
  "_seq_no": 0,
  "_primary_term": 1,
  "found": true,
  "_source": {
    "email": "john@smith.com",
    "first_name": "John",
    "last_name": "Smith",
    "info": {
      "bio": "Eco-warrior and defender of the weak",
      "age": 25,
      "interests": [
        "dolphins",
        "whales"
      ]
    },
    "join_date": "2024/05/01"
  }
}
----
// NOTCONSOLE

[discrete]
[[elasticsearch-intro-documents-fields-data-metadata]]
==== Data and metadata

An indexed document contains data and metadata.
In {es}, metadata fields are prefixed with an underscore.

The most important metadata fields are:

* `_source`. Contains the original JSON document.
* `_index`. The name of the index where the document is stored.
* `_id`. The document's ID. IDs must be unique per index.

[discrete]
[[elasticsearch-intro-documents-fields-mappings]]
==== Mappings and data types

Each index has a <<mapping,mapping>> or schema for how the fields in your documents are indexed.
A mapping defines the <<mapping-types,data type>> for each field, how the field should be indexed,
and how it should be stored.
When adding documents to {es}, you have two options for mappings:

* <<mapping-dynamic, Dynamic mapping>>. Let {es} automatically detect the data types and create the mappings for you. This is great for getting started quickly.
* <<mapping-explicit, Explicit mapping>>. Define the mappings up front by specifying data types for each field. Recommended for production use cases.

[TIP]
====
You can use a combination of dynamic and explicit mapping on the same index.
This is useful when you have a mix of known and unknown fields in your data.
====

// New html page
[[search-analyze]]
=== Search and analyze data

You can use {es} as a basic document store to simply retrieve documents and their
metadata.
However, the real power of {es} comes from its advanced search and analytics capabilities.

The primary tool for interacting with {es} today is the <<query-dsl, Query DSL>>.
We'll be using the Query DSL for the examples in this guide.

[TIP]
====
{esql} is our new piped query language (and compute engine) that is initally mainly focused on time-series data like logs and metrics.
====

// {es} provides a REST API for managing your cluster and indexing
// and searching your data.
// For testing purposes, you can easily submit requests
// directly from the command line using cURL or using the Dev Tools {kibana-ref}/console-kibana.html[Console] in {kib}.

// To integrate {es} into your applications, you can use the
// https://www.elastic.co/guide/en/elasticsearch/client/index.html[{es} client]
// for your language of choice: Java, JavaScript, Go, .NET, PHP, Perl, Python
// or Ruby.

// TODO: This info will be moved to separate "Interact with Elasticsearch" sibling page


[discrete]
[[search-data]]
==== Searching your data

{es} support a wide range of search techniques including:

* <<full-text-queries,*Full-text search*>>. Search text that has been analyzed and indexed to support full-text search based on relevance.
* <<keyword,*Keyword search*>>. Search for exact matches using `keyword` fields.
* <<semantic-search,*Semantic search*>>. Search `semantic_field` fields using dense or sparse vector search on embeddings generated in your {es} cluster.
* <<knn-search,*K-nearest neighbors (kNN) search*>>. Search for similar dense vectors using the kNN algorithm for embeddings generated outside of {es}.
* <<geo-queries,*Geospatial search*>>. Search for locations and spatial relationship using geospatial queries.

[discrete]
[[intro-search-query-languages]]
==== Query languages

The following languages can be used to query {es}:

[cols="1,2,2,1", options="header"]
|===
| Name | Description | Use Cases | Development Status

| <<query-dsl,Query DSL>>
| Primary query language for {es}. Powerful and flexible JSON-style language that enables complex queries.
| Supports full-text search, semantic search, keyword search, filtering, aggregations, and more.

| Active development

| <<esql,({esql})>>
| Introduced in *8.11*, the Elasticsearch Query Language ({esql}) is a piped query language language for filtering, transforming, and analyzing data.
| Initially tailored towards working with time series data like logs and metrics. Robust integration with {kib} for querying, visualizing, and analyzing data.
| Active development

| https://www.elastic.co/guide/en/elasticsearch/client/index.html[Programming language clients]
| Libraries and APIs for interacting with Elasticsearch using your programming language of choice. Includes Java, Python, JavaScript, Rust, and more.
| For application development. Enables data indexing, searching, updating, and aggregation directly from your application code.
| Active development

| <<eql,EQL>>
| Event Query Language (EQL) is a query language for event-based time series data. Data must contain an `@timestamp` field to use EQL.
| Designed for the threat hunting security use case.
| Supported

| <<xpack-sql,Elasticsearch SQL>>
| Allows native, real-time SQL-like querying against {es} data. JDBC and ODBC drivers are available for integration with business intelligence (BI) tools.
| Enables users familiar with SQL to query {es} data using familiar syntax for BI and reporting.
| Supported

|===

[discrete]
[[analyze-data]]
==== Analyzing your data

{es} enables a host of use cases based on aggregations and time series data analysis.

[discrete]
[[analyze-data-query-dsl]]
===== Query DSL

<<search-aggregations,Aggregations>> are the primary tool for analyzing {es} data using the Query DSL.
An aggregation summarizes your data as metrics, statistics, or other analytics:

* <<search-aggregations-metrics,Metric>>. Calculate metrics,
such as a sum or average, from field values.
* <<search-aggregations-bucket,Bucket>>. Group documents into buckets based on field values, ranges,
or other criteria.
* <<search-aggregations-pipeline,Pipeline>>. Run aggregations on the results of other aggregations.

Run aggregations by specifying the <<search-search,search API>>'s `aggs` parameter.
Learn more in <<run-an-agg,Run an aggregation>>.

[discrete]
[[analyze-data-esql]]
===== {esql}

<<esql,Elasticsearch Query Language ({esql})>> is a piped query language for filtering, transforming, and analyzing data.
{esql} is built on top of a new compute engine, where search, aggregation, and transformation functions are
directly executed within {es} itself.
It comes with a comprehensive set of <<esql-functions-operators,functions and operators>> for working with data and has robust integration with {kib}'s Discover, dashboards and visualizations.

Learn more in <<esql-getting-started,Getting started with {esql}>>, or try https://www.elastic.co/training/introduction-to-esql[our training course].