[#connectors-onedrive]
=== Elastic OneDrive connector reference
++++
<titleabbrev>OneDrive</titleabbrev>
++++
// Attributes used in this file
:service-name: OneDrive
:service-name-stub: onedrive

The _Elastic OneDrive connector_ is a <<connectors,connector>> for OneDrive.
This connector is written in Python using the {connectors-python}[Elastic connector framework^]. 

View the {connectors-python}/connectors/sources/{service-name-stub}.py[*source code* for this connector^] (branch _{connectors-branch}_, compatible with Elastic _{minor-version}_).

.Choose your connector reference
*******************************
Are you using a native connector on Elastic Cloud or a self-managed connector client? Expand the documentation based on your deployment method.
*******************************

// //////// //// //// //// //// //// //// ////////
// ////////   NATIVE CONNECTOR REFERENCE   ///////
// //////// //// //// //// //// //// //// ////////

[discrete#connectors-onedrive-native-connector-reference]
==== *Native connector (Elastic Cloud)*

.View *native connector* reference

[%collapsible]
===============

[discrete#connectors-onedrive-availability-prerequisites]
===== Availability and prerequisites

This connector is available as a *native connector* as of Elastic version *8.11.0*.

To use this connector natively in Elastic Cloud, satisfy all <<native-connectors-prerequisites,native connector requirements>>.

[discrete#connectors-onedrive-create-native-connector]
===== Create a {service-name} connector
include::_connectors-create-native.asciidoc[]

[discrete#connectors-onedrive-usage]
===== Usage

To use this connector natively in Elastic Cloud, see <<native-connectors>>.

For additional operations, see <<connectors-usage>>.

[discrete#connectors-onedrive-usage-connection]
====== Connecting to OneDrive

To connect to OneDrive you need to https://learn.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal[create an Azure Active Directory application and service principal] that can access resources.

Follow these steps:

. Go to the https://portal.azure.com[Azure portal] and sign in with your Azure account.
. Navigate to the *Azure Active Directory* service.
. Select *App registrations* from the left-hand menu.
. Click on the *New registration* button to register a new application.
. Provide a name for your app, and optionally select the supported account types (e.g., single tenant, multi-tenant).
. Click on the *Register* button to create the app registration.
. After the registration is complete, you will be redirected to the app's overview page. Take note of the *Application (client) ID* value, as you'll need it later.
. Scroll down to the *API permissions* section and click on the *Add a permission* button.
. In the *Request API permissions* pane, select *Microsoft Graph* as the API.
. Choose the application permissions and select the following permissions under the *Application* tab: `User.Read.All`, `File.Read.All`
. Click on the *Add permissions* button to add the selected permissions to your app.
Finally, click on the *Grant admin consent* button to grant the required permissions to the app. This step requires administrative privileges. **NOTE**: If you are not an admin, you need to request the Admin to grant consent via their Azure Portal.
. Click on *Certificates & Secrets* tab. Go to Client Secrets. Generate a new client secret and keep a note of the string present under `Value` column.

[discrete#connectors-onedrive-usage-configuration]
===== Configuration

The following configuration fields are *required*:

Azure application Client ID::
Unique identifier for your Azure Application, found on the app's overview page. Example:
* `ab123453-12a2-100a-1123-93fd09d67394`

Azure application Client Secret::
String value that the application uses to prove its identity when requesting a token, available under the `Certificates & Secrets` tab of your Azure application menu. Example:
* `eyav1~12aBadIg6SL-STDfg102eBfCGkbKBq_Ddyu`

Azure application Tenant ID::
Unique identifier of your Azure Active Directory instance. Example:
* `123a1b23-12a3-45b6-7c8d-fc931cfb448d`

Enable document level security::
Toggle to enable <<dls,document level security>>.
When enabled:
* Full syncs will fetch access control lists for each document and store them in the `_allow_access_control` field.
* Access control syncs will fetch users' access control lists and store them in a separate index.

[WARNING]
====
Enabling DLS for your connector will cause a significant performance degradation, as the API calls to the data source required for this functionality are rate limited.
This impacts the speed at which your content can be retrieved.
====

[discrete#connectors-onedrive-usage-content-extraction]
===== Content Extraction

Refer to <<connectors-content-extraction, Content extraction>> for more details.

[discrete#connectors-onedrive-documents-syncs]
===== Documents and syncs

The connector syncs the following objects and entities:

* *Files*
** Includes metadata such as file name, path, size, content, etc.
* *Folders*

[NOTE]
====
* Content from files bigger than 10 MB won't be extracted. (Self-managed connectors can use the <<connectors-content-extraction-local, self-managed local extraction service>> to handle larger binary files.)
* Permissions are not synced by default.
You must first enable <<connectors-onedrive-client-dls,DLS>>.
Otherwise, *all documents* indexed to an Elastic deployment will be visible to *all users with access* to that Elastic Deployment.
====

[discrete#connectors-onedrive-connectors-onedrive-sync-types]
====== Sync types

<<connectors-sync-types-full,Full syncs>> are supported by default for all connectors.

This connector also supports <<connectors-sync-types-incremental,incremental syncs>>.

[discrete#connectors-onedrive-dls]
===== Document level security

Document level security (DLS) enables you to restrict access to documents based on a userâ€™s permissions. This feature is available by default for the OneDrive connector.
See <<connectors-onedrive-usage-configuration>> for how to enable DLS for this connector.

Refer to <<dls,document level security>> for more details about this feature.

[NOTE]
====
Refer to <<dls-e2e-guide>> to learn how to ingest data with DLS enabled, when building a search application.
====

[discrete#connectors-onedrive-documents-sync-rules]
===== Sync rules

_Basic_ sync rules are identical for all connectors and are available by default.
For more information read <<sync-rules-types>>.

[discrete#connectors-onedrive-sync-rules-advanced]
====== Advanced sync rules

This connector supports <<sync-rules-advanced,advanced sync rules>> for remote filtering.
These rules cover complex query-and-filter scenarios that cannot be expressed with basic sync rules.
Advanced sync rules are defined through a source-specific DSL JSON snippet.

[NOTE]
====
A <<connectors-sync-types-full, full sync>> is required for advanced sync rules to take effect.
====

Here are a few examples of advanced sync rules for this connector.

[discrete#connectors-onedrive-sync-rules-advanced-examples-1]
======= Example 1

This rule skips indexing for files with `.xlsx` and `.docx` extensions.
All other files and folders will be indexed.

[source,json]
----
[
  {
    "skipFilesWithExtensions": [".xlsx" , ".docx"]
  }
]
----

[discrete#connectors-onedrive-sync-rules-advanced-examples-2]
======= Example 2

This rule focuses on indexing files and folders owned by `user1-domain@onmicrosoft.com` and `user2-domain@onmicrosoft.com` but excludes files with `.py` extension.

[source,json]
----
[
  {
    "owners": ["user1-domain@onmicrosoft.com", "user2-domain@onmicrosoft.com"],
    "skipFilesWithExtensions": [".py"]
  }
]
----

[discrete#connectors-onedrive-sync-rules-advanced-examples-3]
======= Example 3

This rule indexes only the files and folders directly inside the root folder, excluding any `.md` files.

[source,json]
----
[
  {
    "skipFilesWithExtensions": [".md"],
    "parentPathPattern": "/drive/root:"
  }
]
----

[discrete#connectors-onedrive-sync-rules-advanced-examples-4]
======= Example 4

This rule indexes files and folders owned by `user1-domain@onmicrosoft.com` and `user3-domain@onmicrosoft.com` that are directly inside the `abc` folder, which is a subfolder of any folder under the `hello` directory in the root. Files with extensions `.pdf` and `.py` are excluded.

[source,json]
----
[
  {
    "owners": ["user1-domain@onmicrosoft.com", "user3-domain@onmicrosoft.com"],
    "skipFilesWithExtensions": [".pdf", ".py"],
    "parentPathPattern": "/drive/root:/hello/**/abc"
  }
]
----

[discrete#connectors-onedrive-sync-rules-advanced-examples-5]
======= Example 5

This example contains two rules.
The first rule indexes all files and folders owned by `user1-domain@onmicrosoft.com` and `user2-domain@onmicrosoft.com`.
The second rule indexes files for all other users, but skips files with a `.py` extension.

[source,json]
----
[
  {
    "owners": ["user1-domain@onmicrosoft.com", "user2-domain@onmicrosoft.com"]
  },
  {
    "skipFilesWithExtensions": [".py"]
  }
]
----

[discrete#connectors-onedrive-sync-rules-advanced-examples-6]
======= Example 6

This example contains two rules.
The first rule indexes all files owned by `user1-domain@onmicrosoft.com` and `user2-domain@onmicrosoft.com`, excluding `.md` files.
The second rule indexes files and folders recursively inside the `abc` folder.

[source,json]
----
[
  {
    "owners": ["user1-domain@onmicrosoft.com", "user2-domain@onmicrosoft.com"],
    "skipFilesWithExtensions": [".md"]
  },
  {
    "parentPathPattern": "/drive/root:/abc/**"
  }
]
----

[discrete#connectors-onedrive-content-extraction]
===== Content Extraction

See <<connectors-content-extraction>>.

[discrete#connectors-onedrive-known-issues]
===== Known issues

* *Enabling document-level security impacts performance.* 
+
Enabling DLS for your connector will cause a significant performance degradation, as the API calls to the data source required for this functionality are rate limited. This impacts the speed at which your content can be retrieved.

Refer to <<connectors-known-issues>> for a list of known issues for all connectors.

[discrete#connectors-onedrive-troubleshooting]
===== Troubleshooting

See <<connectors-troubleshooting>>.

[discrete#connectors-onedrive-security]
===== Security

See <<connectors-security>>.
// Closing the collapsible section 
===============


// //////// //// //// //// //// //// //// ////////
// //////// CONNECTOR CLIENT REFERENCE     ///////
// //////// //// //// //// //// //// //// ////////

[discrete#connectors-onedrive-connector-client-reference]
==== *Connector client (self-managed)*

.View *connector client* reference

[%collapsible]
===============

[discrete#connectors-onedrive-client-availability-prerequisites]
===== Availability and prerequisites

This connector is available as a self-managed *connector client*.

This connector client is compatible with Elastic versions *8.10.0+*.

To use this connector, satisfy all <<build-connector,connector client requirements>>.

[discrete#connectors-onedrive-create-connector-client]
===== Create a {service-name} connector
include::_connectors-create-client.asciidoc[]

[discrete#connectors-onedrive-client-usage]
===== Usage
For additional operations, see <<connectors-usage>>.

[discrete#connectors-onedrive-client-usage-connection]
====== Connecting to OneDrive

To connect to OneDrive you need to https://learn.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal[create an Azure Active Directory application and service principal] that can access resources.

Follow these steps:

. Go to the https://portal.azure.com[Azure portal] and sign in with your Azure account.
. Navigate to the *Azure Active Directory* service.
. Select *App registrations* from the left-hand menu.
. Click on the *New registration* button to register a new application.
. Provide a name for your app, and optionally select the supported account types (e.g., single tenant, multi-tenant).
. Click on the *Register* button to create the app registration.
. After the registration is complete, you will be redirected to the app's overview page. Take note of the *Application (client) ID* value, as you'll need it later.
. Scroll down to the *API permissions* section and click on the *Add a permission* button.
. In the *Request API permissions* pane, select *Microsoft Graph* as the API.
. Choose the application permissions and select the following permissions under the *Application* tab: `User.Read.All`, `File.Read.All`
. Click on the *Add permissions* button to add the selected permissions to your app.
Finally, click on the *Grant admin consent* button to grant the required permissions to the app. This step requires administrative privileges. **NOTE**: If you are not an admin, you need to request the Admin to grant consent via their Azure Portal.
. Click on *Certificates & Secrets* tab. Go to Client Secrets. Generate a new client secret and keep a note of the string present under `Value` column.

[discrete#connectors-onedrive-client-docker]
===== Deployment using Docker

Connector clients are run on your own infrastructure.

include::_connectors-docker-instructions.asciidoc[]

[discrete#connectors-onedrive-client-usage-configuration]
===== Configuration

The following configuration fields are *required*:

`client_id`::
Azure application Client ID, unique identifier for your Azure Application, found on the app's overview page. Example:
* `ab123453-12a2-100a-1123-93fd09d67394`

`client_secret`::
Azure application Client Secret, string value that the application uses to prove its identity when requesting a token. Available under the `Certificates & Secrets` tab of your Azure application menu. Example:
* `eyav1~12aBadIg6SL-STDfg102eBfCGkbKBq_Ddyu`

`tenant_id`::
Azure application Tenant ID: unique identifier of your Azure Active Directory instance. Example:
* `123a1b23-12a3-45b6-7c8d-fc931cfb448d`

`retry_count`::
The number of retry attempts after failed request to OneDrive. Default value is `3`.

`use_document_level_security`::
Toggle to enable <<dls,document level security>>.
When enabled:
* Full syncs will fetch access control lists for each document and store them in the `_allow_access_control` field.
* Access control syncs will fetch users' access control lists and store them in a separate index.
+
[WARNING]
====
Enabling DLS for your connector will cause a significant performance degradation, as the API calls to the data source required for this functionality are rate limited.
This impacts the speed at which your content can be retrieved.
====

`use_text_extraction_service`::
Requires a separate deployment of the <<connectors-content-extraction-local,Elastic Text Extraction Service>>.
Requires that ingest pipeline settings disable text extraction.
Default value is `False`.

[discrete#connectors-onedrive-client-usage-content-extraction]
===== Content Extraction

Refer to <<connectors-content-extraction, Content extraction>> for more details.

[discrete#connectors-onedrive-client-documents-syncs]
===== Documents and syncs

The connector syncs the following objects and entities:

* *Files*
** Includes metadata such as file name, path, size, content, etc.
* *Folders*

[NOTE]
====
* Content from files bigger than 10 MB won't be extracted by default. You can use the <<connectors-content-extraction-local, self-managed local extraction service>> to handle larger binary files.
* Permissions are not synced by default.
You must first enable <<connectors-onedrive-client-dls,DLS>>.
Otherwise, *all documents* indexed to an Elastic deployment will be visible to *all users with access* to that Elastic Deployment.
====

[discrete#connectors-onedrive-client-sync-types]
====== Sync types

<<connectors-sync-types-full,Full syncs>> are supported by default for all connectors.

This connector also supports <<connectors-sync-types-incremental,incremental syncs>>.

[discrete#connectors-onedrive-client-dls]
===== Document level security

Document level security (DLS) enables you to restrict access to documents based on a userâ€™s permissions. This feature is available by default for the OneDrive connector.
See <<connectors-onedrive-client-usage-configuration>> for how to enable DLS for this connector.

Refer to <<dls,document level security>> for more details about this feature.

[NOTE]
====
Refer to <<dls-e2e-guide>> to learn how to ingest data with DLS enabled, when building a search application.
====

[discrete#connectors-onedrive-client-documents-sync-rules]
===== Sync rules

_Basic_ sync rules are identical for all connectors and are available by default.
For more information read <<sync-rules-types>>.

[discrete#connectors-onedrive-client-sync-rules-advanced]
====== Advanced sync rules

This connector supports <<sync-rules-advanced,advanced sync rules>> for remote filtering.
These rules cover complex query-and-filter scenarios that cannot be expressed with basic sync rules.
Advanced sync rules are defined through a source-specific DSL JSON snippet.

[NOTE]
====
A <<connectors-sync-types-full, full sync>> is required for advanced sync rules to take effect.
====

Here are a few examples of advanced sync rules for this connector.

[discrete#connectors-onedrive-client-sync-rules-advanced-examples-1]
======= Example 1

This rule skips indexing for files with `.xlsx` and `.docx` extensions.
All other files and folders will be indexed.

[source,json]
----
[
  {
    "skipFilesWithExtensions": [".xlsx" , ".docx"]
  }
]
----

[discrete#connectors-onedrive-client-sync-rules-advanced-examples-2]
======= Example 2

This rule focuses on indexing files and folders owned by `user1-domain@onmicrosoft.com` and `user2-domain@onmicrosoft.com` but excludes files with `.py` extension.

[source,json]
----
[
  {
    "owners": ["user1-domain@onmicrosoft.com", "user2-domain@onmicrosoft.com"],
    "skipFilesWithExtensions": [".py"]
  }
]
----

[discrete#connectors-onedrive-client-sync-rules-advanced-examples-3]
======= Example 3

This rule indexes only the files and folders directly inside the root folder, excluding any `.md` files.

[source,json]
----
[
  {
    "skipFilesWithExtensions": [".md"],
    "parentPathPattern": "/drive/root:"
  }
]
----

[discrete#connectors-onedrive-client-sync-rules-advanced-examples-4]
======= Example 4

This rule indexes files and folders owned by `user1-domain@onmicrosoft.com` and `user3-domain@onmicrosoft.com` that are directly inside the `abc` folder, which is a subfolder of any folder under the `hello` directory in the root. Files with extensions `.pdf` and `.py` are excluded.

[source,json]
----
[
  {
    "owners": ["user1-domain@onmicrosoft.com", "user3-domain@onmicrosoft.com"],
    "skipFilesWithExtensions": [".pdf", ".py"],
    "parentPathPattern": "/drive/root:/hello/**/abc"
  }
]
----

[discrete#connectors-onedrive-client-sync-rules-advanced-examples-5]
======= Example 5

This example contains two rules.
The first rule indexes all files and folders owned by `user1-domain@onmicrosoft.com` and `user2-domain@onmicrosoft.com`.
The second rule indexes files for all other users, but skips files with a `.py` extension.

[source,json]
----
[
  {
    "owners": ["user1-domain@onmicrosoft.com", "user2-domain@onmicrosoft.com"]
  },
  {
    "skipFilesWithExtensions": [".py"]
  }
]
----

[discrete#connectors-onedrive-client-sync-rules-advanced-examples-6]
======= Example 6

This example contains two rules.
The first rule indexes all files owned by `user1-domain@onmicrosoft.com` and `user2-domain@onmicrosoft.com`, excluding `.md` files.
The second rule indexes files and folders recursively inside the `abc` folder.

[source,json]
----
[
  {
    "owners": ["user1-domain@onmicrosoft.com", "user2-domain@onmicrosoft.com"],
    "skipFilesWithExtensions": [".md"]
  },
  {
    "parentPathPattern": "/drive/root:/abc/**"
  }
]
----

[discrete#connectors-onedrive-client-content-extraction]
===== Content Extraction

See <<connectors-content-extraction>>.

[discrete#connectors-onedrive-client-connector-client-operations]
===== Connector client operations

[discrete#connectors-onedrive-client-testing]
===== End-to-end testing

The connector framework enables operators to run functional tests against a real data source.
Refer to <<build-connector-testing>> for more details.

To perform E2E testing for the GitHub connector, run the following command:

[source,shell]
----
$ make ftest NAME=onedrive
----

For faster tests, add the `DATA_SIZE=small` flag:

[source,shell]
----
make ftest NAME=onedrive DATA_SIZE=small
----

[discrete#connectors-onedrive-client-known-issues]
===== Known issues

* *Enabling document-level security impacts performance.* 
+
Enabling DLS for your connector will cause a significant performance degradation, as the API calls to the data source required for this functionality are rate limited. This impacts the speed at which your content can be retrieved.

Refer to <<connectors-known-issues>> for a list of known issues for all connectors.

[discrete#connectors-onedrive-client-troubleshooting]
===== Troubleshooting

See <<connectors-troubleshooting>>.

[discrete#connectors-onedrive-client-security]
===== Security

See <<connectors-security>>.
// Closing the collapsible section 
===============
