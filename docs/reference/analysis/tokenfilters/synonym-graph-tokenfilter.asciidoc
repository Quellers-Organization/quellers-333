[[analysis-synonym-graph-tokenfilter]]
=== Synonym graph token filter
++++
<titleabbrev>Synonym graph</titleabbrev>
++++

The `synonym_graph` token filter allows to easily handle <<search-with-synonyms,synonyms>>,
including multi-word synonyms correctly during the analysis process.

In order to properly handle multi-word synonyms this token filter
creates a <<token-graphs,graph token stream>> during processing. For more
information on this topic and its various complexities, please read the
http://blog.mikemccandless.com/2012/04/lucenes-tokenstreams-are-actually.html[Lucene's TokenStreams are actually graphs] blog post.

["NOTE",id="synonym-graph-index-note"]
===============================
This token filter is designed to be used as part of a search analyzer
only. If you want to apply synonyms during indexing please use the
standard <<analysis-synonym-tokenfilter,synonym token filter>>.
===============================

[discrete]
[[analysis-synonym-graph-define-synonyms]]
==== Define synonyms sets

include::synonyms-format.asciidoc[]

[discrete]
[[analysis-synonym-graph-configure-sets]]
==== Configure synonyms sets

Synonyms can be configured using the <<synonyms-store-synonyms-api,synonyms API>>, a <<synonyms-store-synonyms-file,synonyms file>>, or directly <<synonyms-store-synonyms-inline,inlined>> in the token filter configuration.
See <<synonyms-store-synonyms,store your synonyms set>> for more details on each option.

Use `synonyms_set` configuration option to provide a synonym set created via Synonyms Management APIs:

[source,JSON]
----
  "filter": {
    "synonyms_filter": {
      "type": "synonym_graph",
      "synonyms_set": "my-synonym-set",
      "updateable": true
    }
  }
----

[WARNING]
======
Synonyms sets must exist before they can be added to indices.
If an index is created referencing a nonexistent synonyms set, the index will remain in a partially created and inoperable state.
The only way to recover from this scenario is to ensure the synonyms set exists then either delete and re-create the index, or close and re-open the index.
======

Use `synonyms_path` to provide a synonym file :

[source,JSON]
----
  "filter": {
    "synonyms_filter": {
      "type": "synonym_graph",
      "synonyms_path": "analysis/synonym-set.txt"
    }
  }
----

The above configures a `synonym` filter, with a path of
`analysis/synonym-set.txt` (relative to the `config` location).

Use `synonyms` to define inline synonyms:

[source,JSON]
----
  "filter": {
    "synonyms_filter": {
      "type": "synonym_graph",
      "synonyms": ["pc => personal computer", "computer, pc, laptop"]
    }
  }
----

Additional settings are:

* `updateable` (defaults to `false`). If `true` allows
<<indices-reload-analyzers,reloading>> search analyzers to pick up
changes to synonym files. Only to be used for search analyzers.
* `expand` (defaults to `true`).
Expand definitions for equivalent synonyms mappings.
See <<synonym-graph-tokenizer-expand-equivalent-synonyms,expand equivalent synonyms>>.
* `lenient` (defaults to `false`).
If `true` ignores errors while parsing the synonym configuration.
It is important to note that only those synonym rules which cannot get parsed are ignored.
See <<synonym-graph-tokenizer-stop-token-filter,synoyms and stop token filters>> for an example of `lenient` behaviour for invalid synonym rules.

[discrete]
[[synonym-graph-tokenizer-expand-equivalent-synonyms]]
===== `expand` equivalent synonyms

The `expand` parameter controls whether to expand equivalent synonyms mappings.
Consider a synonym defined like:

`foo, bar, baz`

Using `expand: true` would get the synonym expanded into:

```
foo => bar
foo => baz
bar => foo
bar => baz
baz => foo
baz => bar
```

When `expand` is set to `false`, the mappings are not expanded and only the first word is considered as the source word. The synonym would be equivalent to:

```
foo => foo
bar => foo
baz => foo
```

The `expand` parameter does not affect explicit synonyms mappings, like `foo, bar => baz`.

[discrete]
[[synonym-graph-tokenizer-ignore_case-deprecated]]
===== `tokenizer` and `ignore_case` are deprecated

The `tokenizer` parameter controls the tokenizers that will be used to
tokenize the synonym, this parameter is for backwards compatibility for indices that created before 6.0.
The `ignore_case` parameter works with `tokenizer` parameter only.

[discrete]
[[analysis-synonym-graph-analizers-configure]]
==== Configure analyzers with synonym graph token filters

To apply synonyms, you will need to include a synonym graph token filter into an analyzer:

[source,JSON]
----
      "analyzer": {
        "my_analyzer": {
          "type": "custom",
          "tokenizer": "standard",
          "filter": ["stemmer", "synonym_graph"]
        }
      }
----

[discrete]
[[analysis-synonym-graph-token-order]]
===== Token filters ordering

Order is important for your token filters.
Text will be processed first through filters preceding the synonym filter before being processed by the synonym filter.

{es} will also use the token filters preceding the synonym filter in a tokenizer chain to parse the entries in a synonym file or synonym set.
In the above example, the synonyms graph token filter is placed after a stemmer. The stemmer will also be applied to the synonym entries.

Because entries in the synonym map cannot have stacked positions, some token filters may cause issues here.
Token filters that produce multiple versions of a token may choose which version of the token to emit when parsing synonyms.
For example, `asciifolding` will only produce the folded version of the token.
Others, like `multiplexer`, `word_delimiter_graph` or `ngram` will throw an error.

If you need to build analyzers that include both multi-token filters and synonym filters, consider using the <<analysis-multiplexer-tokenfilter,multiplexer>> filter, with the multi-token filters in one branch and the synonym filter in the other.

[discrete]
[[synonym-graph-tokenizer-stop-token-filter]]
===== Synonyms and `stop` token filter

Synonyms and <<analysis-stop-tokenfilter,stop token filter>> interact with each other in the following ways:

[discrete]
====== Stop token filter *before* synonym token filter

Stop words will be removed from the synonym rule definition.
This can can cause errors on the synonym rule.

WARNING: An invalid synonym rule will cause an error applying your analyzer changes.
For reloadable analyzers, the analyzer will not be reloaded and the changes will not be applied.
You must correct the error in the synonym rules and reload the analyzer, as an index that contains an invalid synonym rule won't be able to be reopened.
This means that the index will be inoperable when a node that contains the index is started, or the index is opened from a closed state.

For *explicit mappings* like `foo, bar => baz` with a stop filter that removes `bar`:

- If `lenient` is set to `false`, an error will be raised as `bar` would be removed from the left hand side of the synonym rule.
- If `lenient` is set to `true`, the mapping `foo => baz` will be added and `bar => baz` will be ignored.

If the stop filter removed `baz` instead:

- If `lenient` is set to `false`, an error will be raised as `baz` would be removed from the right hand side of the synonym rule.
- If `lenient` is set to `true`, the mapping will have no effect as the target word is removed.

For *equivalent mappings* like `foo, bar, baz` with a stop filter that removes `bar`:

- If `lenient` is set to `false`, an error will be raised as `bar` would be removed from the synonym rule.
- If `lenient` is set to `true`, the mappings added would be equivalent to `foo => baz` and `baz => foo`, which do not contain the removed word.

[discrete]
====== Stop token filter *after* synonym token filter

The stop filter will remove the terms from the resulting synonym expansion.

For example, a synonym like `foo => baz` and a stop filter that removes `baz` will get no matches for `foo` or `bar`, as both would get expanded to `baz` which is removed by the stop filter.

If the stop filter removed `foo` instead, then searching for `foo` would get expanded to `baz`, which is not removed by the stop filter thus potentially providing matches for `baz`.
