[discrete]
[[esql-where]]
=== `WHERE`

**Syntax**

[source,esql]
----
WHERE expression
----

*Parameters*

`expression`::
A boolean expression.

*Description*

The `WHERE` processing command produces a table that contains all the rows from
the input table for which the provided condition evaluates to `true`.

*Examples*

[source,esql]
----
include::{esql-specs}/docs.csv-spec[tag=where]
----

Which, if `still_hired` is a boolean field, can be simplified to:

[source,esql]
----
include::{esql-specs}/docs.csv-spec[tag=whereBoolean]
----

Use date math to retrieve data from a specific time range. For example, to
retrieve the last hour of logs:

[source,esql]
----
include::{esql-specs}/date.csv-spec[tag=docsNowWhere]
----

`WHERE` supports various <<esql-functions,functions>>. For example the
<<esql-length>> function:

[source,esql]
----
include::{esql-specs}/docs.csv-spec[tag=whereFunction]
----

For a complete list of all functions, refer to <<esql-functions>>.

include::../functions/predicates.asciidoc[tag=body]

Use `LIKE` to filter data based on string patterns using wildcards.

[source,esql]
----
include::{esql-specs}/docs.csv-spec[tag=like]
----

Use `RLIKE` to filter data based on string patterns using using <<regexp-syntax,regular expressions>>.

[source,esql]
----
include::{esql-specs}/docs.csv-spec[tag=rlike]
----

The `IN` operator allows testing whether a field or expression equals
an element in a list of literals, fields or expressions:

[source,esql]
----
include::{esql-specs}/row.csv-spec[tag=in-with-expressions]
----

For a complete list of all operators, refer to <<esql-operators>>.
