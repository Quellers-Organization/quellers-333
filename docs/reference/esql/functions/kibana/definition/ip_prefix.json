{
  "comment" : "This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.",
  "type" : "eval",
  "name" : "ip_prefix",
  "description" : "Returns the original IP with all but the first N bits set to zero.",
  "signatures" : [
    {
      "params" : [
        {
          "name" : "ip",
          "type" : "ip",
          "optional" : false,
          "description" : "IP address of type `ip` (both IPv4 and IPv6 are supported)."
        },
        {
          "name" : "prefixLength",
          "type" : "integer",
          "optional" : false,
          "description" : "Prefix length. If in the range (0, 32), the IP is treated as an IPv4 address. If in the range (32, 128), the IP is treated as an IPv6 address. If the prefix length is out of range, the function returns `null`."
        }
      ],
      "variadic" : false,
      "returnType" : "ip"
    }
  ],
  "examples" : [
    "required_capability: fn_ip_prefix\nrow ip4 = to_ip(\"1.2.3.4\"), ip6 = to_ip(\"fe80::cae2:65ff:fece:feb9\")\n| eval ip4_prefix = ip_prefix(ip4, 24), ip4_as_6_prefix = ip_prefix(ip4, 120), ip6_prefix = ip_prefix(ip6, 112), ip6_as_4_prefix = ip_prefix(ip6, 16),\n       ip4_full = ip_prefix(ip4, 32), ip6_full = ip_prefix(ip6, 128),\n       ip4_zeroes = ip_prefix(ip4, 0);"
  ]
}
